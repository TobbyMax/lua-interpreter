// Code generated by MockGen. DO NOT EDIT.
// Source: lua-interpreter/internal/parser (interfaces: scanner)
//
// Generated by this command:
//
//	mockgen -destination=./mock/parser_mock.go -package=mock lua-interpreter/internal/parser scanner
//

// Package mock is a generated GoMock package.
package mock

import (
	lexer "lua-interpreter/internal/lexer"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockscanner is a mock of scanner interface.
type Mockscanner struct {
	ctrl     *gomock.Controller
	recorder *MockscannerMockRecorder
	isgomock struct{}
}

// MockscannerMockRecorder is the mock recorder for Mockscanner.
type MockscannerMockRecorder struct {
	mock *Mockscanner
}

// NewMockscanner creates a new mock instance.
func NewMockscanner(ctrl *gomock.Controller) *Mockscanner {
	mock := &Mockscanner{ctrl: ctrl}
	mock.recorder = &MockscannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockscanner) EXPECT() *MockscannerMockRecorder {
	return m.recorder
}

// NextToken mocks base method.
func (m *Mockscanner) NextToken() lexer.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextToken")
	ret0, _ := ret[0].(lexer.Token)
	return ret0
}

// NextToken indicates an expected call of NextToken.
func (mr *MockscannerMockRecorder) NextToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextToken", reflect.TypeOf((*Mockscanner)(nil).NextToken))
}
